-----------------------------

P24) Text Fitting
- Dynamic Programming

Given a text (a sequence of words) and a container with a certain width and height, find the number of text that can be fitted in the container without splitting any words. 
There must be a single space between two consecutive words on a line.

The input has 3 lines. The first line is an integer for width. The second line is an integer for height. The third line is a string for text.

Important Info:

You must solve this problem using dynamic programming (DP). If you do not use DP, you will not receive any credit for this assignment.
Example 1:

Input:
2
6
cosc 3320
Output: 1

Explanation: The text is a sequence of 2 words: cosc, 3320
c o s c - -
3 3 2 0 - -
The character '-' signifies an empty space on the screen.
Example 2:

Input:
3
7
one a bc
Output: 2

Explanation: The text is a sequence of 3 words: one, a, bc
o n e - a - -
b c - o n e -
a - b c - - -
The character '-' signifies an empty space on the screen.

-----------------------------

#include <iostream>
#include <sstream>
#include <vector>

using namespace std;

int textFit(vector<string> &sentence, int rows, int cols) {
  int n = sentence.size();
  int* nextIndex = new int[n];
  int* numberRepeatsPerWordStar = new int[n];
  for (int i = 0; i < n; i++) {
    int currWordIndex = i;
    int repeats = 0;
    int currIndex = 0;
    // loop till you reach the last column to find number of repeats that can go
    // in a single row assuming you started with a certain word. also check what
    // would be the next word to start the next row
    while (currIndex + sentence[currWordIndex].length() <= cols) {
      currIndex += sentence[currWordIndex++].length() + 1;
      if (currWordIndex == n) {
        repeats++;
        currWordIndex = 0;
      }
    }
    nextIndex[i] = currWordIndex;
    numberRepeatsPerWordStar[i] = repeats;
  }
  int totalRepeats = 0;
  int nextWordIndex = 0;
  for (int row = 0; row < rows; row++) {
    totalRepeats += numberRepeatsPerWordStar[nextWordIndex];
    nextWordIndex = nextIndex[nextWordIndex];
  }
  return totalRepeats;
}

int main() {
  int rows = 0;
  int cols = 0;

  cin >> rows >> cols;

  cin.ignore();

  string text;
  getline(cin, text);
  stringstream s(text);

  vector<string> sentence;

  string word;
  while (s >> word) {
    sentence.push_back(word);
  }

  cout << textFit(sentence, rows, cols);

  return 0;
}
