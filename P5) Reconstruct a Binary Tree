-----------------------------

P5) Reconstruct a Binary Tree
- Recursion

Given the pre-order traversal and in-order traversal of a binary tree, output the post-order traversal of the binary tree.

Input format:
line 1: number of nodes
line 2: the pre-order traversal;
line 3: the post-order in-order traversal.

note: The tree nodes are labeled 1, 2, ..., n

Example 1

Input:
9
1 2 3 4 5 6 7 8 9
3 2 5 4 6 1 8 7 9
Output:
3 5 6 4 2 8 9 7 1
Explanation:
The tree can be reconstructed from the input as:

          1
    2           7
  3    4      8    9
      5  6

-----------------------------

#include <iostream>
#include <unordered_map>
#include <sstream>

using namespace std;

void postorder(int* preorder, int& preIndex, unordered_map<int, int> &map, int start, int end) {
  if (start > end) {
    return;
  }

  int value = preorder[preIndex++]; // next element in preorder is root
  
  int rootIndex = map[value]; // find element's index in inorder

  postorder(preorder, preIndex, map, start, rootIndex - 1);

  postorder(preorder, preIndex, map, rootIndex + 1, end);

  cout << value << ' ';
}


int main() {

  int size;

  cin >> size;

  cin.ignore();
  
  int *preorder = new int[size];
  int *inorder = new int[size];
  unordered_map<int,int> map;

  int element;
  for (int i = 0; i < size; i++){
    cin >> element;
    preorder[i] = element;
  }

  for (int i = 0; i < size; i++){
    cin >> element;
    inorder[i] = element;
    map[element] = i;
  }

  int preIndex = 0;
  postorder(preorder, preIndex, map, 0, size - 1);


  return 0;
}
