-----------------------------

P6) Graph Traversal
- Graph

Given a n*n grid of square; each square can be 1 (land) or 0 (water). 
An island is a maximally connected land square; two land square are connected if they have common edges.

Find the number of islands for the given grid of squares

Example 1
Input:
6
1 1 0 0 1 1
1 0 1 1 0 0
1 0 0 1 1 1
0 0 0 0 0 1
1 0 0 0 0 1
1 1 1 1 1 1
Output:
3
Explanation:
There are three connected land areas: top left, top right, and bottom.  

Example 2
Input:
10
1 1 1 0 0 0 0 0 1 1
0 1 0 0 1 1 1 1 0 0
1 1 1 1 0 1 1 0 0 1
1 0 0 1 0 1 1 1 1 1
1 0 1 0 1 1 0 1 0 1
1 1 0 0 0 0 0 0 0 1
0 0 1 0 1 1 1 0 0 1
0 1 1 1 1 0 1 0 1 1
1 0 1 1 1 1 1 0 1 0
0 1 1 0 0 0 0 1 0 0
Output:
7
Explanation:

-----------------------------

#include <iostream>
#include <vector>

using namespace std;

void dfs(int** arr, bool** visited, int n, int i, int j){
  if (i < 0 || i == n || j < 0 || j == n || arr[i][j] == 0 || visited[i][j]){
    return;
  }

  visited[i][j] = true;
  
  dfs(arr, visited, n, i - 1, j);
  dfs(arr, visited, n, i + 1, j);
  dfs(arr, visited, n, i, j - 1);
  dfs(arr, visited, n, i, j + 1);
}

int countIslands(int** arr, bool** visited, int n){
  int count = 0;

  for (int i = 0; i < n; i++){
    for (int j = 0; j < n; j++){
      if (arr[i][j] == 1 && !visited[i][j]){
        count++;
        dfs(arr, visited, n, i, j);
      }
    }
  }
  return count;
}


int main() {
  int n;

  cin >> n;

  int** arr = new int*[n];
  bool** visited = new bool*[n];
  
  for (int i = 0; i < n; i++){
    arr[i] = new int[n];
    visited[i] = new bool[n];
  }
  
  for (int i = 0; i < n; i++){
    for (int j = 0; j < n; j++){
      cin >> arr[i][j];
      visited[i][j] = false;
    }
  }
  cout << countIslands(arr, visited, n);


  for (int i = 0; i < n; i++){
    delete [] arr[i];
    delete [] visited[i];
  }

  delete [] arr;
  delete [] visited;

  return 0;
}
